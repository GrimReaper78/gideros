<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object name="debug" page="debug" parent="" type="lua" version="Gideros 2011.6"><![CDATA[The debug library does not give you a debugger for Lua, but it offers all the primitives that you need for writing a debugger for Lua. For performance reasons, the official interface to these primitives is through the C API. The debug library in Lua is a way to access these functions directly within Lua code. This library declares all its functions inside the debug table.]]>
  <platform>android</platform>
  <platform>ios</platform>
  <platform>mac</platform>
  <platform>pc</platform>
  <platform>html5</platform>
  <platform>winrt</platform>
  <platform>win32</platform>
  <method name="debug.debug" page="debug" shortdesc="enters interactive debug mode, line with only &quot;cont&quot; terminates" version="Gideros 2011.6"><![CDATA[Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word cont finishes this function, so that the caller continues its execution. 

Note that commands for debug.debug are not lexically nested within any function, and so have no direct access to local variables.]]></method>
  <method name="debug.gethook" page="gethook" shortdesc="returns current hook function, hook mask, hook count" version="Gideros 2011.6"><![CDATA[Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the `debug.sethook` function).]]>
    <return type="function"><![CDATA[function that works as hook]]></return>
    <return type="string"><![CDATA[provided mask of the hook]]></return>
    <return type="number"><![CDATA[hook count]]></return>
  </method>
  <method name="debug.getinfo" page="getinfo" shortdesc="returns table with information about a function" version="Gideros 2011.6"><![CDATA[Returns a table with information about a function. You can give the function directly, or you can give a number as the value of function, which means the function running at level function of the call stack of the given thread: level 0 is the current function (getinfo itself); level 1 is the function that called getinfo; and so on. If function is a number larger than the number of active functions, then getinfo returns nil. 


 The returned table can contain all the fields returned by lua_getinfo, with the string what describing which fields to fill in. The default for what is to get all information available, except the table of valid lines. If present, the option 'f' adds a field named func with the function itself. If present, the option 'L' adds a field named activelines with the table of valid lines. 


 For instance, the expression debug.getinfo(1,"n").name returns a table with a name for the current function, if a reasonable name can be found, and the expression debug.getinfo(print) returns a table with all available information about the print function.]]>
    <parameter name="function" optional="false" type="any"><![CDATA[function or call stack level]]></parameter>
    <parameter name="what" optional="true" type="string"><![CDATA[what information to return]]></parameter>
    <return type="table"><![CDATA[table with information about the function]]></return>
  </method>
  <method name="debug.getlocal" page="getlocal" shortdesc="returns name and value of local variable with index local at stack level" version="Gideros 2011.6"><![CDATA[This function returns the name and the value of the local variable with index local of the function at level level of the stack. (The first parameter or local variable has index 1, and so on, until the last active local variable.) The function returns nil if there is no local variable with the given index, and raises an error when called with a level out of range. (You can call debug.getinfo to check whether the level is valid.) 


 Variable names starting with '(' (open parentheses) represent internal variables (loop control variables, temporaries, and C function locals).]]>
    <parameter name="level" optional="false" type="number"><![CDATA[level of the scope/stack]]></parameter>
    <parameter name="local" optional="false" type="number"><![CDATA[index of the function]]></parameter>
    <return type="string"><![CDATA[name of the variable]]></return>
    <return type="varies"><![CDATA[value of the variable]]></return>
  </method>
  <method name="debug.getupvalue" page="getupvalue" shortdesc="returns name and value of upvalue with index up of function func" version="Gideros 2011.6"><![CDATA[This function returns the name and the value of the upvalue with index up of the function func. The function returns nil if there is no upvalue with the given index.]]>
    <parameter name="func" optional="false" type="function"><![CDATA[function to look for upvalue]]></parameter>
    <parameter name="up" optional="false" type="number"><![CDATA[index of the upvalue]]></parameter>
    <return type="string"><![CDATA[the name of upvalue]]></return>
    <return type="varies"><![CDATA[the value of upvalue]]></return>
  </method>
  <method name="debug.sethook" page="sethook" shortdesc="sets given function as a hook, mask=&quot;[crl]&quot;" version="Gideros 2011.6"><![CDATA[Sets the given function as a hook. The string mask and the number count describe when the hook will be called. The string mask may have the following characters, with the given meaning: 

"c": the hook is called every time Lua calls a function;
"r": the hook is called every time Lua returns from a function;
"l": the hook is called every time Lua enters a new line of code.

 With a count different from zero, the hook is called after every count instructions. 


 When called without arguments, debug.sethook turns off the hook. 


 When the hook is called, its first parameter is a string describing the event that has triggered its call: "call", "return" (or "tail return", when simulating a return from a tail call), "line", and "count". For line events, the hook also gets the new line number as its second parameter. Inside a hook, you can call getinfo with level 2 to get more information about the running function (level 0 is the getinfo function, and level 1 is the hook function), unless the event is "tail return". In this case, Lua is only simulating the return, and a call to getinfo will return invalid data.]]>
    <parameter name="hook" optional="false" type="function"><![CDATA[function to be executed as hook]]></parameter>
    <parameter name="mask" optional="false" type="string"><![CDATA[mask of the hook "c", "r" or "l"]]></parameter>
    <parameter name="count" optional="true" type="number"><![CDATA[hook count]]></parameter>
  </method>
  <method name="debug.setlocal" page="setlocal" shortdesc="sets local variable with index local at stack level with value" version="Gideros 2011.6"><![CDATA[This function assigns the value value to the local variable with index local of the function at level level of the stack. The function returns nil if there is no local variable with the given index, and raises an error when called with a level out of range. (You can call getinfo to check whether the level is valid.) Otherwise, it returns the name of the local variable.]]>
    <parameter name="level" optional="false" type="number"><![CDATA[level of the stack]]></parameter>
    <parameter name="local" optional="false" type="number"><![CDATA[index of the variable]]></parameter>
    <parameter name="value" optional="false" type="varies"><![CDATA[value of the variable to set]]></parameter>
    <return type="string"><![CDATA[name of the variable or nil]]></return>
  </method>
  <method name="debug.setupvalue" page="setupvalue" shortdesc="sets upvalue with index up of function func with value" version="Gideros 2011.6"><![CDATA[This function assigns the value value to the upvalue with index up of the function func. The function returns nil if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.]]>
    <parameter name="func" optional="false" type="function"><![CDATA[function to set the upvalue for]]></parameter>
    <parameter name="up" optional="false" type="number"><![CDATA[index of the upvalue]]></parameter>
    <parameter name="value" optional="false" type="varies"><![CDATA[value to set as upvalue]]></parameter>
    <return type="string"><![CDATA[name of the upvalue or nil]]></return>
  </method>
  <method name="debug.traceback" page="traceback" shortdesc="returns a string with a traceback of the call stack" version="Gideros 2011.6"><![CDATA[Frequently, when an error happens, we want more debug information than only the location where the error occurred. At least, we want a traceback, showing the complete stack of calls leading to the error. When pcall returns its error message, it destroys part of the stack (the part that went from it to the error point). Consequently, if we want a traceback, we must build it before pcall returns. To do that, Lua provides the xpcall function. Besides the function to be called, it receives a second argument, an error handler function. In case of errors, Lua calls that error handler before the stack unwinds, so that it can use the debug library to gather any extra information it wants about the error. Two common error handlers are debug.debug, which gives you a Lua prompt so that you can inspect by yourself what was going on when the error happened (later we will see more about that, when we discuss the debug library); and debug.traceback, which builds an extended error message with a traceback. The latter is the function that the stand-alone interpreter uses to build its error messages. You also can call debug.traceback at any moment to get a traceback of the current execution:]]>
    <parameter name="message" optional="true" type="string"><![CDATA[message to debug]]></parameter>
    <parameter name="level" optional="true" type="number"><![CDATA[stack level]]></parameter>
    <return type="string"><![CDATA[debug traceback]]></return>
  </method>
  <method name="debug.settypemt" page="settypemt" shortdesc="Set meta table type" version="Gideros 2016.08"><![CDATA[Set meta table type

From http://lua-users.org/wiki/LuaPowerPatches
Useful to extend Lua syntax and for some tricks.

Adds new method to debug library:
debug.settypemt(type, metatable)
Supported types: "nil","boolean","lightuserdata","number","string","table","function","userdata","thread".

For example:
<pre><code>
-- enable string indexing (s[n]) to get character at utf8 position
string.__index = function(s, n) return utf8.sub(s, n, n) end
debug.settypemt("string", string)
local s = "Hello, world!"
print(s[8]) --> w
</code></pre>
Also sets table library as default type metatable for all tables without user defined metatables i.e. enables following syntax: t:insert(3); t:remove(2); t:sort(func); etc.]]></method>
</object>
