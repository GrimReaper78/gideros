<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object name="MovieClip" page="MovieClip" parent="Sprite" type="gideros" version="Gideros 2011.6"><![CDATA[<br />
The `MovieClip` class inherits from the following classes: `Sprite` &gt; `EventDispatcher`.<br />
<br />
The `MovieClip` class is used create static timedlined animations. The timeline parameters are given as an array. <br />
Each array element specifies one timeline element and consists of the starting frame, ending frame, sprite and <br />
optional tweening parameters. Frame numbers start from 1.<br />
<br />
When a `MovieClip` object finishes it playing (by reaching its final frame or a frame with stop action), <br />
it dispatches an `Event.COMPLETE` event.<br />
<br />
The following properties can be tweened:<br />
<br />
&lt;ul&gt;
&lt;li&gt;`x`&lt;/li&gt;
&lt;li&gt;`y`&lt;/li&gt;
&lt;li&gt;`rotation`&lt;/li&gt;
&lt;li&gt;`scale`&lt;/li&gt;
&lt;li&gt;`scaleX`&lt;/li&gt;
&lt;li&gt;`scaleY`&lt;/li&gt;
&lt;li&gt;`alpha`&lt;/li&gt;
&lt;/ul&gt;
<br />

Additionally `MovieClip` uses set function to tween properties, so if you override provided object's set function by adding new parameters it can accept, then you can tween those new parameters too.


&lt;br /&gt;
The following easing functions can be used:<br />
<br />
 * `&quot;inBack&quot;`<br />
 * `&quot;outBack&quot;`<br />
 * `&quot;inOutBack&quot;`<br />
 * `&quot;inBounce&quot;`<br />
 * `&quot;outBounce&quot;`<br />
 * `&quot;inOutBounce&quot;`<br />
 * `&quot;inCircular&quot;`<br />
 * `&quot;outCircular&quot;`<br />
 * `&quot;inOutCircular&quot;`<br />
 * `&quot;inCubic&quot;`<br />
 * `&quot;outCubic&quot;`<br />
 * `&quot;inOutCubic&quot;`<br />
 * `&quot;inElastic&quot;`<br />
 * `&quot;outElastic&quot;`<br />
 * `&quot;inOutElastic&quot;`<br />
 * `&quot;inExponential&quot;`<br />
 * `&quot;outExponential&quot;`<br />
 * `&quot;inOutExponential&quot;`<br />
 * `&quot;linear&quot;`<br />
 * `&quot;inQuadratic&quot;`<br />
 * `&quot;outQuadratic&quot;`<br />
 * `&quot;inOutQuadratic&quot;`<br />
 * `&quot;inQuartic&quot;`<br />
 * `&quot;outQuartic&quot;`<br />
 * `&quot;inOutQuartic&quot;`<br />
 * `&quot;inQuintic&quot;`<br />
 * `&quot;outQuintic&quot;`<br />
 * `&quot;inOutQuintic&quot;`<br />
 * `&quot;inSine&quot;`<br />
 * `&quot;outSine&quot;`<br />
 * `&quot;inOutSine&quot;`<br />
<br />
Following examples demonstrates the possible uses of MovieClip class.<br />
<br />
]]>
  <platform>android</platform>
  <platform>ios</platform>
  <platform>mac</platform>
  <platform>pc</platform>
  <method name="MovieClip.new" page="new" shortdesc="creates a new MovieClip object" version="Gideros 2011.6"><![CDATA[<br />
Creates a new `MovieClip` object. After constructing the MovieClip object, it starts playing. You don&#039;t need to<br />
call [[MovieClip:play]].<br />
<br />
]]>
    <parameter name="timeline" optional="false" type="table"><![CDATA[array of timeline elements]]></parameter>
  </method>
  <method name="MovieClip:play" page="play" shortdesc="starts playing the movie clip" version="Gideros 2011.6"><![CDATA[<br />
Starts playing the movie clip.<br />
<br />
]]></method>
  <method name="MovieClip:stop" page="stop" shortdesc="stops playing the movie clip" version="Gideros 2011.6"><![CDATA[<br />
Stops playing the movie clip.<br />
<br />
]]></method>
  <method name="MovieClip:gotoAndPlay" page="gotoAndPlay" shortdesc="goes to the specified frame and starts playing" version="Gideros 2011.6"><![CDATA[<br />
Goes to the specified frame and starts playing.<br />
<br />
]]>
    <parameter name="frame" optional="false" type="int"><![CDATA[the frame number]]></parameter>
  </method>
  <method name="MovieClip:gotoAndStop" page="gotoAndStop" shortdesc="goes to the specified frame and stops" version="Gideros 2011.6"><![CDATA[<br />
Goes to the specified frame and stops.<br />
<br />
]]>
    <parameter name="frame" optional="false" type="int"><![CDATA[the frame number]]></parameter>
  </method>
  <method name="MovieClip:setGotoAction" page="setGotoAction" shortdesc="sets a &amp;quot;go to&amp;quot; action to the specified frame" version="Gideros 2011.6"><![CDATA[<br />
Sets a *goto* action to the specified frame. When the movie clip reaches a frame <br />
with goto action, it jumps to the destination frame and continues to play. <br />
This function is usually used to create looping animations.<br />
<br />
]]>
    <parameter name="frame" optional="false" type="int"><![CDATA[the frame number]]></parameter>
    <parameter name="destframe" optional="false" type="int"><![CDATA[the destination frame number]]></parameter>
  </method>
  <method name="MovieClip:setStopAction" page="setStopAction" shortdesc="sets a &amp;quot;stop&amp;quot; action to the specified frame" version="Gideros 2011.6"><![CDATA[<br />
Sets a *stop* action to the specified frame. When the movie clip reaches a frame <br />
with stop action, it stops playing. This function is usually used to divide<br />
the animation into independent parts.<br />
<br />
]]>
    <parameter name="frame" optional="false" type="int"><![CDATA[the frame number]]></parameter>
  </method>
  <method name="MovieClip:clearAction" page="clearAction" shortdesc="clears the action at the specified frame" version="Gideros 2011.6"><![CDATA[<br />
Clears the action (goto or stop) at the specified frame.<br />
<br />
<br />
]]>
    <parameter name="frame" optional="false" type="int"><![CDATA[the frame number]]></parameter>
  </method>
  <event name="Event.COMPLETE" page="Event.COMPLETE" value="complete" version="Gideros 2012.2.1"><![CDATA[This event is dispatched when a `MovieClip` object finishes playing (by reaching its final frame or a frame with stop action).]]></event>
  <example name=""><![CDATA[-- construct a 100 frame animation where x coordinate of sprite tweens from 0 to 200 linearly<br />
local mc = MovieClip.new{<br />
	{1, 100, sprite, {x = {0, 200, "linear"}}}<br />
}<br />
<br />
-- construct a 100 frame animation where x coordinate of sprite is 50 (constant) and <br />
-- y coordinate of sprite tweens from 50 to 150 by using inBounce function<br />
local mc = MovieClip.new{<br />
	{1, 100, sprite, {x = 50, y = {50, 150, "inBounce"}}}<br />
}<br />
<br />
-- construct a 200 frame animation where sprite1 and sprite2 tweens differently<br />
-- here sprite1 is visible between frames [1, 150]<br />
-- and sprite2 is visible between frames [100, 200]<br />
local mc = MovieClip.new{<br />
	{1, 100, sprite1, {x = {0, 200, "linear"}}},<br />
	{50, 150, sprite1, {y = {0, 100, "linear"}, alpha = {0, 1, "easeOut"}}},<br />
	{100, 200, sprite2, {x = {0, 200, "linear"}}},<br />
}<br />
<br />
	-- construct a looping 6 frame animation where each frame is a different sprite<br />
	local mc = MovieClip.new{<br />
		{1, 1, frame1},	<br />
		{2, 2, frame2},	<br />
		{3, 3, frame3},	<br />
		{4, 4, frame4},	<br />
		{5, 5, frame5},	<br />
		{6, 6, frame6},<br />
	}<br />
	mc:setGotoAction(6, 1)	-- if the animation reaches frame 6 then go to frame 1<br />
						<br />
-- construct a looping 6 frame animation playing 5 times slower than the previous example<br />
local mc = MovieClip.new{<br />
	{1, 5, frame1},	<br />
	{5, 10, frame2},	<br />
	{11, 15, frame3},	<br />
	{16, 20, frame4},	<br />
	{21, 25, frame5},	<br />
	{26, 30, frame6},<br />
}<br />
mc:setGotoAction(30, 1)	-- if the animation reaches frame 30 then go to frame 1
]]></example>
</object>
